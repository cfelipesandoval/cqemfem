
"""Initializing thing
  @param N 
  @param a
  @param b
  """
def gauss_quadrature_1D_init(N, a, b):
  if N == 2:
    loc = [-0.5773502691896257,0.5773502691896257]
  elif N == 3:
    loc = [0,-0.7745966692414834,0.7745966692414834]
  elif N == 4:
    loc = [-0.3399810435848563,0.3399810435848563,-0.8611363115940526,0.8611363115940526]
  elif N == 5:
    loc = [0,-0.5384693101056831,0.5384693101056831,-0.9061798459386640, 
            0.9061798459386640]
  elif N == 6:
    loc = [0.6612093864662645,-0.6612093864662645,-0.2386191860831969, 
            0.2386191860831969,-0.9324695142031521,0.9324695142031521]
  elif N == 7:
    loc = [0,0.4058451513773972,-0.4058451513773972,-0.7415311855993945, 
            0.7415311855993945,-0.9491079123427585,0.9491079123427585]
  elif N == 8:
    loc = [-0.1834346424956498,0.1834346424956498,-0.5255324099163290, 
            0.5255324099163290,-0.7966664774136267,0.7966664774136267, 
            -0.9602898564975363,0.9602898564975363]
  elif N == 9:
    loc = [0,-0.8360311073266358,0.8360311073266358,-0.9681602395076261, 
            0.9681602395076261,-0.3242534234038089,0.3242534234038089, 
            -0.6133714327005904,0.6133714327005904]
  elif N == 10:
    loc = [-0.1488743389816312,0.1488743389816312,-0.4333953941292472, 
            0.4333953941292472,-0.6794095682990244,0.6794095682990244, 
            -0.8650633666889845,0.8650633666889845,-0.9739065285171717, 
            0.9739065285171717]
  elif N == 11:
    loc = [0,-0.2695431559523450,0.2695431559523450,-0.5190961292068118, 
            0.5190961292068118,-0.7301520055740494,0.7301520055740494, 
            -0.8870625997680953,0.8870625997680953,-0.9782286581460570, 
            0.9782286581460570]
  else:
      print('Error: "N" must be a value between 2 and 11.')
      return
  

  loc = (b-a)/2*loc+(b+a)/2
  
  return loc

  """Compute Gaussian Quadrature
  @param a Start point
  @param b End point
  @param f Function to be computed 
  """
def gauss_quadrature_1D(a, b, f: list):
  num_pts = len(f);

  if num_pts == 2:
      weights = [1,1]
  elif num_pts == 3:
      weights = [0.8888888888888888,0.5555555555555556,0.5555555555555556]
  elif num_pts == 4:
      weights = [0.6521451548625461,0.6521451548625461,0.3478548451374538, 
                0.3478548451374538]
  elif num_pts == 5:
      weights = [0.5688888888888889,0.4786286704993665,0.4786286704993665, 
                0.2369268850561891,0.2369268850561891]
  elif num_pts == 6:
      weights = [0.3607615730481386,0.3607615730481386,0.4679139345726910, 
                0.4679139345726910,0.1713244923791704,0.1713244923791704]
  elif num_pts == 7:
      weights = [0.4179591836734694,0.3818300505051189,0.3818300505051189, 
                0.2797053914892766,0.2797053914892766,0.1294849661688697, 
                0.1294849661688697]
  elif num_pts == 8:
      weights = [0.3626837833783620,0.3626837833783620,0.3137066458778873, 
                0.3137066458778873,0.2223810344533745,0.2223810344533745, 
                0.1012285362903763,0.1012285362903763]
  elif num_pts == 9:
      weights = [0.3302393550012598,0.1806481606948574,0.1806481606948574, 
                0.0812743883615744,0.0812743883615744,0.3123470770400029, 
                0.3123470770400029,0.2606106964029354,0.2606106964029354]
  elif num_pts == 10:
      weights = [0.2955242247147529,0.2955242247147529,0.2692667193099963, 
                0.2692667193099963,0.2190863625159820,0.2190863625159820, 
                0.1494513491505806,0.1494513491505806,0.0666713443086881, 
                0.0666713443086881]
  elif num_pts == 11:
      weights = [0.2729250867779006,0.2628045445102467,0.2628045445102467, 
                0.2331937645919905,0.2331937645919905,0.1862902109277343, 
                0.1862902109277343,0.1255803694649046,0.1255803694649046, 
                0.0556685671161737,0.0556685671161737]


  val = (b-a)/2*weights*f
  
  return val